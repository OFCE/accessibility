% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dodgr router.R
\name{clusterize_com2com}
\alias{clusterize_com2com}
\title{Groupe les communes de MOBPRO afin d'optimiser le temps de calcul}
\usage{
clusterize_com2com(data, seuil = 20000000L, method = "complete")
}
\arguments{
\item{data}{un tibble de paires de commune origine/destination}

\item{seuil}{le nombre de paires à partir duquel il n'y a plus de gain de vitesse (10m par défaut)}

\item{method}{la méthode de clusterization ("complete" par défaut)

L'algorithme calcule une distance qui dépend de l'augmentation du nombre de paires calculées
Si les deux communes ont les mêmes destinations, la distance est 0
Si elles n'ont destination commune, cette distance vaut 1.
Sur la base de cette distance, on fait une classification hiérarchique.
On applique ensuite une estimation de la vitesse de calcul (log(v1/v2) = 0.5log(p1/p2))
qui sature au seuil (v(p>seuil)=v)
On choisit alors le nombre de clusters qui minimise le temps estimé de calcul
Le seuil dépend du nombre de processeurs affectés au calcul}
}
\value{
une liste avec les cluster, et les détails de la minimisation
}
\description{
MOBPRO défini des paires de communes pour les différents modes de transport,
éventuellement réduits si on se limite aux flux inférieur à 95\%
}
\details{
Si on calcule les produits origine destination par commune,
on fait des calculs sur des matrices o/d trop petites pour être calculées efficacement par {dodgr}
L'algorithme utilisé ici regroupe les paires de communes, afin d'accroitre la taille des paquets
sans pour autant accroître trop le nombre total de paires calculées
}
